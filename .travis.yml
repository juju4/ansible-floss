---
## from https://github.com/geerlingguy/ansible-role-apache/blob/master/.travis.yml
sudo: required

jobs:
  include:
    - stage: ansible-lint
      name: Ansible Lint
      before_install:
        - sudo pip install ansible-lint
      script:
        - ansible-lint tasks/main.yml
      after_script: true
    - stage: play
      name: Play test suites - Centos 8
      env:
        - distribution: centos
          version: 8
          init: /usr/lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default
    - stage: play
      name: Play test suites - Centos 7
      env:
        - distribution: centos
          version: 7
          init: /usr/lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default
#        - distribution: ubuntu
#          version: 20.04
#          init: /lib/systemd/systemd
#          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
#          suite: default
    - stage: play
      name: Play test suites - Ubuntu 18.04
      env:
        - distribution: ubuntu
          version: 18.04
          init: /lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default
    - stage: play
      name: Play test suites - Centos 8 virtualenv
      env:
        - distribution: centos
          version: 8
          init: /usr/lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default-virtualenv
    - stage: play
      name: Play test suites - Centos 7 virtualenv
      env:
        - distribution: centos
          version: 7
          init: /usr/lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default-virtualenv
#        - distribution: ubuntu
#          version: 20.04
#          init: /lib/systemd/systemd
#          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
#          suite: default-virtualenv
    - stage: play
      name: Play test suites - Ubuntu 18.04 virtualenv
      env:
        - distribution: ubuntu
          version: 18.04
          init: /lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default-virtualenv
    - stage: playdev
      name: Play test suites devel only - Centos 8 HEAD
      if: branch =~ /^devel*/
      env:
        - distribution: centos
          version: 8
          init: /lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default-HEAD
    - stage: playdev
      name: Play test suites devel only - Ubuntu 18.04 HEAD
      if: branch =~ /^devel*/
      env:
        - distribution: ubuntu
          version: 18.04
          init: /lib/systemd/systemd
          run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
          suite: default-HEAD

services:
  - docker

before_install:
  # - sudo apt-get update
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  - env
  - pwd
  - find -ls
  - "[ -f get-dependencies.sh ] && sh -x get-dependencies.sh"
  - cp test/travis/initctl_faker test/
  # Customize container
  - 'sudo docker build --rm=true --file=test/travis/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible test'

script:
  - container_id=$(mktemp)
    # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD%/*}":/etc/ansible/roles:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible --version'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/juju4.floss/test/integration/${suite}/default.yml --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/juju4.floss/test/integration/${suite}/default.yml -vvv'

  # Test role idempotence.
  - >
    sudo docker exec "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/juju4.floss/test/integration/${suite}/default.yml
    | tee /tmp/idempotency.log
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)

  # serverspec tests
## travis/docker: Errno::EROFS: Read-only file system @ dir_s_mkdir - /etc/ansible/roles/juju4.floss/test/integration/${suite}/serverspec/.bundle
#  - 'sudo docker exec --tty "$(cat ${container_id})" /etc/ansible/roles/juju4.floss/test/integration/${suite}/serverspec/run-local-tests.sh'

after_failure:
  - 'sudo docker exec --tty "$(cat ${container_id})" python --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" python2 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" python3 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" python3.4 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip2 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip3 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip3.4 --version'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip freeze'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip2 freeze'
  - 'sudo docker exec --tty "$(cat ${container_id})" pip3 freeze'

after_script:
  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
